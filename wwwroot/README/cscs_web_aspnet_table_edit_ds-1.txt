# HTMX Version with CRUD Operations
    
Here's the enhanced HTMX version with full CRUD (Create, Read, Update, Delete) functionality:

## Updated Backend (Program.cs)

```csharp
// Add these endpoints to your existing Program.cs

// Get empty form for new part
app.MapGet("/parts/new", () =>
    Results.Extensions.Html(
        """
        <tr hx-swap-oob="beforeend:#parts-table-body">
            <td><input name="PartCode" class="input input-bordered w-full" required/></td>
            <td><input name="PartName" class="input input-bordered w-full" required/></td>
            <td><input name="PartCity" class="input input-bordered w-full"/></td>
            <td><input name="Amount" type="number" step="0.01" class="input input-bordered w-full"/></td>
            <td class="flex gap-2">
                <button class="btn btn-success btn-sm"
                        hx-post="/parts"
                        hx-include="closest tr">Save</button>
                <button class="btn btn-error btn-sm"
                        hx-get="/parts-table"
                        hx-target="closest tr">Cancel</button>
            </td>
        </tr>
        """));

// Create new part
app.MapPost("/parts", async (PartsService service, [FromForm] Part part) =>
{
    await service.CreatePartAsync(part);
    var (parts, _) = await service.GetPartsAsync(new PartQuery());
    return Results.Extensions.Html(await service.RenderPartsTable(parts));
});

// Get edit form
app.MapGet("/parts/{partCode}/edit", async (PartsService service, string partCode) =>
{
    var part = await service.GetPartAsync(partCode);
    return Results.Extensions.Html(
        $"""
        <tr>
            <td><input name="PartCode" value="{part.PartCode}" class="input input-bordered w-full" readonly/></td>
            <td><input name="PartName" value="{part.PartName}" class="input input-bordered w-full" required/></td>
            <td><input name="PartCity" value="{part.PartCity}" class="input input-bordered w-full"/></td>
            <td><input name="Amount" type="number" step="0.01" value="{part.Amount}" class="input input-bordered w-full"/></td>
            <td class="flex gap-2">
                <button class="btn btn-success btn-sm"
                        hx-put="/parts/{partCode}"
                        hx-include="closest tr">Save</button>
                <button class="btn btn-error btn-sm"
                        hx-get="/parts-table"
                        hx-target="closest tr">Cancel</button>
            </td>
        </tr>
        """);
});

// Update part
app.MapPut("/parts/{partCode}", async (PartsService service, string partCode, [FromForm] Part part) =>
{
    await service.UpdatePartAsync(partCode, part);
    var (parts, _) = await service.GetPartsAsync(new PartQuery());
    return Results.Extensions.Html(await service.RenderPartsTable(parts));
});

// Delete part
app.MapDelete("/parts/{partCode}", async (PartsService service, string partCode) =>
{
    await service.DeletePartAsync(partCode);
    var (parts, _) = await service.GetPartsAsync(new PartQuery());
    return Results.Extensions.Html(await service.RenderPartsTable(parts));
});

```




## Updated PartsService.cs

```csharp
// Add these methods to your PartsService
public async Task CreatePartAsync(Part part)
{
    const string sql = @"
        INSERT INTO NKSCPART
        (nksc_partcode, nksc_partname, nksc_partcity, nksc_amount)
        VALUES (@PartCode, @PartName, @PartCity, @Amount)";
    await _db.ExecuteAsync(sql, part);
}

public async Task<Part> GetPartAsync(string partCode)
{
    const string sql = @"
        SELECT
            nksc_partcode as PartCode,
            nksc_partname as PartName,
            nksc_partcity as PartCity,
            nksc_amount as Amount
        FROM NKSCPART
        WHERE nksc_partcode = @partCode";
    return await _db.QuerySingleAsync<Part>(sql, new { partCode });
}

public async Task UpdatePartAsync(string partCode, Part part)
{
    const string sql = @"
        UPDATE NKSCPART SET
            nksc_partname = @PartName,
            nksc_partcity = @PartCity,
            nksc_amount = @Amount
        WHERE nksc_partcode = @partCode";
    await _db.ExecuteAsync(sql, new {
        partCode,
        part.PartName,
        part.PartCity,
        part.Amount
    });
}

public async Task DeletePartAsync(string partCode)
{
    await _db.ExecuteAsync("DELETE FROM NKSCPART WHERE nksc_partcode = @partCode", new { partCode });
}
```

## Updated Frontend (index.html)

```html
<!-- Add this button somewhere above your table -->
<div class="flex justify-end mb-4">
    <button class="btn btn-primary"
            hx-get="/parts/new"
            hx-target="#parts-table-body"
            hx-swap="beforeend">
        <i class="fas fa-plus mr-2"></i> Add New Part
    </button>
</div>

<!-- Update your table structure -->
<table class="table table-zebra w-full">
    <thead>
        <tr>
            <th>Part Code</th>
            <th>Part Name</th>
            <th>City</th>
            <th>Amount</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="parts-table-body"
           hx-get="/parts-table"
           hx-trigger="load, every 10s">
        <!-- Content will be loaded by HTMX -->
    </tbody>
</table>
```

## Updated RenderPartsTable Method

```csharp
public async Task<string> RenderPartsTable(IEnumerable<Part> parts)
{
    var sb = new StringBuilder();

    foreach (var part in parts)
    {
        sb.AppendLine($"""
            <tr>
                <td>{part.PartCode}</td>
                <td>{part.PartName}</td>
                <td>{part.PartCity}</td>
                <td>{part.Amount:N2}</td>
                <td class="flex gap-2">
                    <button class="btn btn-warning btn-sm"
                            hx-get="/parts/{part.PartCode}/edit"
                            hx-target="closest tr">
                        Edit
                    </button>
                    <button class="btn btn-error btn-sm"
                            hx-delete="/parts/{part.PartCode}"
                            hx-confirm="Are you sure you want to delete this part?">
                        Delete
                    </button>
                </td>
            </tr>
            """);
    }

    return sb.ToString();
}
```

## Key Features Added:

1. **Create Operation**:
   - "Add New Part" button injects a form row at the end of the table
   - Form posts to `/parts` endpoint

2. **Update Operation**:
   - Edit button replaces the row with an editable form
   - Form PUTs to `/parts/{partCode}` endpoint

3. **Delete Operation**:
   - Delete button with confirmation dialog
   - Sends DELETE request to `/parts/{partCode}`

4. **Real-time Updates**:
   - Table automatically refreshes after CRUD operations
   - Periodic polling every 10 seconds

5. **User Experience**:
   - Inline editing without page reloads
   - Form validation (required fields)
   - Confirmation for delete operations
   - Loading states handled by HTMX

The implementation maintains the HTMX philosophy of keeping the frontend simple while enabling rich interactivity through server-side HTML fragments. All state management happens on the server, with HTMX handling the DOM updates.