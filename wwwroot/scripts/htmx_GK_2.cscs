SQLConnectionString("Data Source=localhost,1433;Initial Catalog=T__DATAX_Y4__BY4;User Id=sa;password=aura;TrustServerCertificate=True;");



CreateEndpoint("GET", "/", "getRoot");
function getRoot(){

    templateHandle = LoadTemplate(TemplatesPath() + "htmx_GK_2.html");

    // print("templateHandle = " + templateHandle);


    htmlString = RenderHtml(templateHandle);

    headers = {"Content-Type": "text/html"};
    return Response(headers, htmlString, 200);
}


CreateEndpoint("GET", "/api/gkGlave", "getGKGlave");
function getGKGlave(request){

    page = 1;
    if (Contains(request["QueryParams"], "page")) {
        page = int(request["QueryParams"]["page"]);
    }
    
    size = 20;
    if (Contains(request["QueryParams"], "size")) {
        size = int(request["QueryParams"]["size"]);
    }
    
    sort = "GK_GL_BR_TEM";
    if (Contains(request["QueryParams"], "sort")) {
        sort = request["QueryParams"]["sort"];
    }
    
    order = "asc";
    if (Contains(request["QueryParams"], "order")) {
        order = request["QueryParams"]["order"];
    }
    
    search = "";
    if (Contains(request["QueryParams"], "search")) {
        search = request["QueryParams"]["search"];
    }
    
    skip = (page - 1) * size;
    
    // Build query
    whereClause = "";
    if (search != "") {
        whereClause = " WHERE GK_GL_BR_TEM LIKE @search OR GK_GL_OPIS LIKE @search OR GK_GL_OZNAKA LIKE @search";
    }
    
    query = "SELECT " +
            // " TOP 10 " +
            "ID, " + 
            "FORMAT(GK_GL_DATUM, 'yyyy-MM-dd') AS GK_GL_DATUM, " + 
            "GK_GL_BR_TEM, " + 
            "FORMAT(GK_GL_DATDOK, 'yyyy-MM-dd') AS GK_GL_DATDOK, " +
            "GK_GL_OPIS, " +
            "GK_GL_PARTNER " +
            
            "FROM NKGKGLTM" + whereClause + " " +
            "ORDER BY " + sort + " " + order + " " +
            "OFFSET @skip ROWS FETCH NEXT @size ROWS ONLY";
            // "OFFSET @skip ROWS FETCH NEXT 3 ROWS ONLY";
    
    countQuery = "SELECT COUNT(*) FROM NKGKGLTM" + whereClause;
    
    // Execute data query
    sqlParams = {};
    sqlParams.Add({"@skip", skip});
    sqlParams.Add({"@size", size});
    if (search != "") {
        sqlParams.Add({"@search", "%" + search + "%"});
    }

    // print("SQL Params: " + sqlParams);
    // print("SQL Query: " + query);
    // print("Count Query: " + countQuery);

    tableRowsHtml = "";

    transactions = sqlQuery(query, sqlParams);
    data = [];
    if (transactions != null && Size(transactions) > 1) {
        for (i = 1; i < Size(transactions); i++) {
            
            tableRowsHtml += "<tr>";

            tableRowsHtml += "<td>" + transactions[i][0] + "</td>";
            tableRowsHtml += "<td>" + transactions[i][1] + "</td>";
            tableRowsHtml += "<td>" + transactions[i][2] + "</td>";
            tableRowsHtml += "<td>" + transactions[i][3] + "</td>";
            tableRowsHtml += "<td>" + transactions[i][4] + "</td>";
            tableRowsHtml += "<td>" + transactions[i][5] + "</td>";

             tableRowsHtml += "</tr>";
        }
    }


    // Get total count
    countResult = sqlQuery(countQuery, sqlParams);
    totalRecords = countResult[1][0];
    lastPage = Math.Ceil(totalRecords / size);

    // print("Total Records: " + totalRecords);
    // print("Last Page: " + lastPage);
    // print("Count Result: " + countResult); 

    // tableRowsHtml = "" +
    // "<tr>" +
    //                 "<td>1</td>" +
    //                 "<td>2024-06-01</td>" +
    //                 "<td>INV-1001</td>" +
    //                 "<td>2024-06-01</td>" +
    //                 "<td>Payment received</td>" +
    //                 "<td>Acme Corp</td>" +
    //             "</tr>" +
    //             "<tr>" +
    //                 "<td>2</td>" +
    //                 "<td>2024-06-02</td>" +
    //                 "<td>INV-1002</td>" +
    //                 "<td>2024-06-02</td>" +
    //                 "<td>Invoice sent</td>" +
    //                 "<td>Beta LLC</td>" +
    //             "</tr>" +
    //             ;


    headers = {"Content-Type": "text/html"};
    return Response(headers, tableRowsHtml, 200);
}

